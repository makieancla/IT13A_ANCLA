
package midterm_project;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Scanner;


public class Restaurant_orderingSystem {


    static Scanner scanner = new Scanner(System.in);
    static DecimalFormat df = new DecimalFormat("#.00");
    static final String USER_FILE = "users.txt";

    
    public static void main(String[] args) {
        while (true) { // loop back to main menu if login fails
            System.out.println("--- Welcome to the Restaurant Ordering System ---");
            System.out.println("[1] Login");
            System.out.println("[2] Create Account");
            System.out.print("Enter your choice: ");

            int choice = 0;
            try {
                choice = scanner.nextInt(); 
                scanner.nextLine(); 
            } catch (Exception e) {
                System.out.println("Invalid input. Please enter a number.");
                scanner.nextLine(); 
                continue; // restart loop
            }

            boolean loggedIn = false;

            if (choice == 1) {
                loggedIn = login();
                if (loggedIn) {
                    menu(); // show menu if login is successful
                    break;  
                }
            } else if (choice == 2) {
                createAccount();  
                loggedIn = login(); 
                if (loggedIn) {
                    menu(); // show menu after successful login
                    break;
                }
            } else {
                System.out.println("Invalid option.");
            }
        }
    }

    // ----------- Create a new account -----------
    static void createAccount() {
        System.out.println("\n--- Create New Account ---");
        System.out.print("Enter new username: ");
        String username = scanner.nextLine(); // read username
        System.out.print("Enter new password: ");
        String password = scanner.nextLine(); // read password
        String encrypted = encrypt(password); // encrypt password

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(USER_FILE, true))) {
            writer.write(username + "," + encrypted); 
            writer.newLine(); // new line after each user
            System.out.println("Account created successfully!");
        } catch (IOException e) {
            System.out.println("Error saving account.");
        }
    }

    // ----------- Login method -----------
    static boolean login() {
        System.out.println("\n--- Login ---");
        System.out.print("Enter Username: ");
        String inputUser = scanner.nextLine(); 
        System.out.print("Enter Password: ");
        String inputPass = scanner.nextLine(); 

        try (BufferedReader reader = new BufferedReader(new FileReader(USER_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(","); // split line into username and password
                if (parts.length == 2 && parts[0].equals(inputUser)) {
                    if (decrypt(parts[1]).equals(inputPass)) {
                        System.out.println("Login successful!");
                        return true; 
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading account file.");
            return false;
        }

        // If username or password didn't match
        System.out.println("Invalid username or password.\n");
        return false;
    }

    // ----------- Menu and ordering -----------
    static void menu() {
        String[] items = {"Chicken Adobo", "Pork Adobo", "Halo-halo", "Mango Float", "Vegetable Salad", "Tapioca", "Cake"};
        double[] prices = {120.0, 150.0, 70.0, 100.0, 150.0, 50.0, 250.0}; 
        int[] quantities = new int[items.length]; // array to store ordered quantities
        double totalPrice = 0; 
        boolean continueShopping = true; 

        // Start ordering loop
        do {
            System.out.println("\n--- Menu ---");
            for (int i = 0; i < items.length; i++) {
                System.out.println((i + 1) + " - " + items[i] + " (" + df.format(prices[i]) + ")");
            }

            System.out.print("Enter your choice: ");
            int choice = 0;

            try {
                choice = scanner.nextInt(); // read item number

                if (choice >= 1 && choice <= 7) {
                    System.out.print("Enter quantity: ");
                    int qty = scanner.nextInt(); // read quantity

                    if (qty <= 0) {
                        System.out.println("Invalid quantity! Please enter a positive number.");
                        continue; 
                    }

                    int index = choice - 1; 
                    quantities[index] += qty; 
                    System.out.println("You ordered " + qty + " " + items[index] + "(s).");
                    totalPrice += prices[index] * qty; // add to total
                } else {
                    System.out.println("Invalid choice! Please select a valid option.");
                    continue; // skip back to menu
                }

            } catch (Exception e) {
                System.out.println("Invalid input! Please enter a number.");
                scanner.next(); 
                continue; 
            }

            // Ask if the user wants to order again
            System.out.print("Do you want to purchase another product? (Y/N): ");
            String choiceInput = scanner.next();
            continueShopping = choiceInput.equalsIgnoreCase("Y") || choiceInput.equalsIgnoreCase("YES");

        } while (continueShopping); // loop until user says no

        // ----------- Order Summary -----------
        System.out.println("\n--- Order Summary ---");
        System.out.printf("%-17s %-6s %-8s %-8s\n", "Item", "Qty", "Price", "Subtotal");
        System.out.println("-----------------------------------------");

        boolean hasOrder = false;
        for (int i = 0; i < items.length; i++) {
            if (quantities[i] > 0) {
                hasOrder = true;
                double subtotal = quantities[i] * prices[i];
                System.out.printf("%-17s %-6d %-8s %-8s\n", items[i], quantities[i], df.format(prices[i]), df.format(subtotal));
            }
        }

        if (hasOrder) {
            System.out.println("-----------------------------------------");
            System.out.println(" Total: " + df.format(totalPrice));

            // ----------- Payment -----------
            System.out.println("\n[Payment]");
            double payment = 0;
            System.out.print("Enter Payment (Cash): ");

            // loop until payment is sufficient
            do {
                try {
                    payment = scanner.nextDouble();
                    if (payment < totalPrice) {
                        System.out.println("Insufficient Cash!");
                        System.out.print("Enter Sufficient Payment (Cash): ");
                    }
                } catch (Exception e) {
                    System.out.println("Invalid input! Enter a valid amount.");
                    scanner.next(); // clear invalid input
                }
            } while (payment < totalPrice);

            // calculate and show change
            double change = payment - totalPrice;
            System.out.println("Change: " + df.format(change));
            System.out.println("Thank you for ordering at our restaurant! Please come again. ðŸ˜Š");

        } else {
            System.out.println("No items ordered.");
        }
    }

    // ----------- Encrypt password using Caesar Cipher (+3 shift) -----------
    static String encrypt(String password) {
        StringBuilder encrypted = new StringBuilder();
        for (char c : password.toCharArray()) {
            encrypted.append((char) (c + 3));
        }
        return encrypted.toString();
    }

    // ----------- Decrypt password using Caesar Cipher (-3 shift) -----------
    static String decrypt(String encrypted) {
        StringBuilder decrypted = new StringBuilder();
        for (char c : encrypted.toCharArray()) {
            decrypted.append((char) (c - 3));
        }
        return decrypted.toString();
    }
}

    
